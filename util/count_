#include <utility>
#include <vector>
#include <cstddef>
#include <iostream>

template<typename T, typename... Args> 
concept is_constructible_impl = requires {
    T{std::declval<Args>()...};
};

template<typename T, typename... Args>
constexpr bool is_constructible = is_constructible_impl<T, Args...>;

struct Universal {
    template<typename T>
    operator T() {}
};

template<typename T, typename... Args>
constexpr size_t count_members_impl() {
    if constexpr (is_constructible<T, Args..., Universal>) {
        return count_members_impl<T, Args..., Universal>();
    }
    return sizeof...(Args);
}

template<typename T>
constexpr size_t count_members() {
    return count_members_impl<T>();
}

struct Goo {
    int x;
    int y;
};

struct Foo {
    int x;
    double y;
    char c;
    std::string str;
    std::vector<int> v;
    Goo goo;
};

int main() {
    std::cout << count_members<Foo>() << std::endl;
}